{"version":3,"sources":["components/ScoreCounter.js","components/LastClickedReview.js","components/HUD.js","components/PicContainer.js","components/TitleCard.js","App.js","serviceWorker.js","index.js"],"names":["ScoreCounter","props","react_default","a","createElement","className","score","high","LastClickedReview","alt","src","path","HUD","components_ScoreCounter","lastColor","components_LastClickedReview","lastClicked","showLastColor","PicContainer","state","imgs","imglist","highScore","shuffle","array","sort","Math","random","Shuffle","_this","Clicked","event","document","getElementById","play","target","setState","alert","_this2","this","id","components_HUD","map","pic","key","color","title","onClick","Component","TitleCard","App","components_TitleCard","components_PicContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAWeA,MATf,SAAsBC,GAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,mBAAWH,EAAMK,OACjBJ,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMM,QCUnBC,MAdf,SAA2BP,GACvB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,cAEIH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OACIK,IAAI,oBACJJ,UAAU,gBACVK,IAAKT,EAAMU,SCcZC,MApBf,SAAaX,GAST,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACS,EAAD,CACIP,MAAOL,EAAMK,MACbC,KAAMN,EAAMM,OAXxB,SAAuBO,GACnB,GAAGA,EACC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,CACPJ,KAAM,SAAYV,EAAMe,YAAe,SAStCC,CAAchB,EAAMe,eCuDlBE,6MApEXC,MAAM,CACFC,KAAMC,EACNf,MAAO,EACPgB,UAAW,EACXN,YAAa,MAIjBO,QAAU,SAAAC,GACNA,EAAMC,KAAK,kBAAMC,KAAKC,SAAW,QAGrCC,QAAU,WACNC,EAAKN,QAAQM,EAAKV,MAAMC,SAG5BU,QAAU,SAACC,GACPC,SAASC,eAAe,UAAUC,OAC9BH,EAAMI,OAAO1B,MAAQoB,EAAKV,MAAMH,aAC5Ba,EAAKV,MAAMb,MAAQuB,EAAKV,MAAMG,WAC9BO,EAAKO,SAAS,CACVd,UAAWO,EAAKV,MAAMb,QAG9B+B,MAAM,aACNR,EAAKO,SAAS,CACV9B,MAAO,EACPU,YAAa,KAEjBa,EAAKD,YAELC,EAAKO,SAAS,CACV9B,MAAOuB,EAAKV,MAAMb,MAAQ,EAC1BU,YAAae,EAAMI,OAAO1B,MAE9BoB,EAAKD,oFAIL,IAAAU,EAAAC,KACJ,OACIrC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOoC,GAAG,SAAS9B,IAAI,uBACvBR,EAAAC,EAAAC,cAACqC,EAAD,CACInC,MAAOiC,KAAKpB,MAAMb,MAClBC,KAAMgC,KAAKpB,MAAMG,UACjBZ,IAAK6B,KAAKpB,MAAMR,KAChBK,YAAauB,KAAKpB,MAAMH,eAGhCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVkC,KAAKpB,MAAMC,KAAKsB,IAAI,SAAAC,GAAG,OACpBzC,EAAAC,EAAAC,cAAA,OACIC,UAAU,eACVuC,IAAKD,EAAIE,MACTpC,IAAKkC,EAAIE,MACTC,MAAOH,EAAIE,MACXnC,IAAKiC,EAAIhC,KACToC,QAAST,EAAKR,qBA5DfkB,aCMZC,MARf,WACI,OACI/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,8BADJ,IAC8BF,EAAAC,EAAAC,cAAA,6ECUvB8C,MAXf,WACE,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC+C,EAAD,CAAW9C,UAAU,eACrBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACgD,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAAS5B,SAASC,eAAe,SD2H3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a6244c1b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction ScoreCounter(props){\r\n    return(\r\n        <div className=\"score\">\r\n            <p>SCORE: {props.score}</p>\r\n            <p>HIGH SCORE: {props.high}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreCounter;","import React from \"react\";\r\n\r\nfunction LastClickedReview(props){\r\n    return(\r\n        <div className=\"lastColor\">\r\n            Last Color:\r\n            <br></br>\r\n            <img \r\n                alt=\"Last Color Picked\" \r\n                className=\"lastColor-pic\"\r\n                src={props.path}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LastClickedReview;","import React from \"react\";\r\nimport ScoreCounter from \"./ScoreCounter\";\r\nimport LastClickedReview from \"./LastClickedReview\"\r\n\r\nfunction HUD(props){\r\n\r\n    function showLastColor(lastColor) {\r\n        if(lastColor){\r\n            return <LastClickedReview\r\n            path={\"./img/\" + (props.lastClicked) + \".png\"}\r\n        />\r\n        }\r\n    }\r\n    return(\r\n        <div className=\"row\">\r\n            <ScoreCounter\r\n                score={props.score}\r\n                high={props.high}/>\r\n            {showLastColor(props.lastClicked)}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HUD;","import React, { Component } from \"react\";\nimport imglist from \"./imglist.json\";\nimport HUD from \"./HUD\";\n\nclass PicContainer extends Component {\n    state={\n        imgs: imglist,\n        score: 0,       \n        highScore: 0,\n        lastClicked: ''\n \n    };\n\n    shuffle = array => {\n        array.sort(() => Math.random() - 0.5);\n      }\n\n    Shuffle = () =>{\n        this.shuffle(this.state.imgs)\n    };\n\n    Clicked = (event) => {\n        document.getElementById(\"button\").play()\n        if (event.target.alt === this.state.lastClicked) {\n            if (this.state.score > this.state.highScore){\n                this.setState({\n                    highScore: this.state.score\n                })\n            }\n            alert(\"You Lose!\");\n            this.setState({\n                score: 0,\n                lastClicked: ''\n            })\n            this.Shuffle();\n        } else {\n            this.setState({\n                score: this.state.score + 1,\n                lastClicked: event.target.alt\n            })\n            this.Shuffle()\n        }\n    };\n\n    render(){\n        return(\n            <div>\n                <div className=\"HUD\">\n                    <audio id=\"button\" src=\"./audio/button.wav\"/>\n                    <HUD\n                        score={this.state.score}\n                        high={this.state.highScore}\n                        src={this.state.path}\n                        lastClicked={this.state.lastClicked}\n                    />\n                </div>\n                <div className=\"picContainer\">            \n                    {this.state.imgs.map(pic =>\n                        <img \n                            className=\"col-md-4 pic\"\n                            key={pic.color}\n                            alt={pic.color}\n                            title={pic.color}\n                            src={pic.path}\n                            onClick={this.Clicked}\n                        />\n                    )}\n                </div>\n            </div>\n        )\n    };\n};\n\nexport default PicContainer;","import React from \"react\";\r\n\r\nfunction TitleCard(){\r\n    return(\r\n        <div className=\"App-header\">\r\n            <h1>The Clicky Game!</h1> <p>Try to click a different color each time, as fast as possible.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TitleCard;","import React from 'react';\nimport './App.css';\nimport PicContainer from \"./components/PicContainer\"\nimport TitleCard from \"./components/TitleCard\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TitleCard className=\"App-header\"/>\n      <div className=\"container\">\n        <PicContainer/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}